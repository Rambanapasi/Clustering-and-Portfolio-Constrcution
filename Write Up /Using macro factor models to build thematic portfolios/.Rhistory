map_df(~Proportional_Cap_Foo(., W_Cap = 0.25) ) %>% select(-RebalanceTime)
# Check
#
# Capped %>% pull(weight) %>% max(.)
Capped %>% pull(weight) %>% max(.)
wts <- Capped
Returns <- df
perfromance_raw <- left_join(wts, Returns, c("stock", "date", "clusters"))
cluster_perfromance_data <- perfromance_raw %>%
group_by(clusters, date) %>%
mutate(cluster_return = weight * rtn) %>%
summarise(cluster_return = sum(cluster_return, na.rm = TRUE)) %>%
arrange(date)
# Create an empty list to store the final cluster performance data
cluster_performance_list <- list()
for (i in seq_along(cluster_portfolio)) {
df <- cluster_portfolio[[i]] %>% as.tibble()
# ... (rest of your code for Rebalance_Days and rebalance_col) ...
# Apply the Proportional_Cap_Foo function to each rebalancing date
Capped <- rebalance_col %>%
group_split(RebalanceTime, clusters) %>%
map_df(~Proportional_Cap_Foo(., W_Cap = 0.4)) %>%
select(-RebalanceTime)
# Merge weights with returns
wts <- Capped
Returns <- df
performance <- left_join(wts, Returns, c("stock", "date", "clusters"))
# Calculate cluster returns
cluster_performance_data <- performance %>%
group_by(clusters, date) %>%
mutate(cluster_return = weight * rtn) %>%
summarise(cluster_return = sum(cluster_return, na.rm = TRUE)) %>%
mutate(cluster_return = ifelse(cluster_return == 0, NA, cluster_return)) %>%
filter(!is.na(cluster_return)) %>%
group_by(clusters) %>%
summarize(
N = n(),
mu = ifelse(N <= 4, prod(1 + cluster_return), prod(1 + cluster_return) ^ (12 / N) - 1),
annualized_sd = sd(cluster_return) * sqrt(4),
sharpe_ratio = mu / annualized_sd
) %>%
select(clusters, sharpe_ratio, N)
# Store the result in the list
cluster_performance_list[[i]] <- cluster_performance_data
}
result <- foreach(df = cluster_performance_list, .combine = rbind) %dopar% {
df
}
result %>%
ggplot(aes(x = N, y = sharpe_ratio)) +
geom_point() +
facet_grid(~clusters) +
labs(title = "Risk Adjusted Performance as Investment Horizon Increases",
x = "Quarters",
y = "Sharpe Ratio") +
fmxdat::theme_fmx()
# define our rebalance months
# at the rebalancing date you want to take the top n of each clusters and reweight.
df <- cluster_portfolio[[1]]
df <- df %>% as.tibble()
Rebalance_Days <- df %>%
mutate(Year = format(date, "%Y"), Month = format(date, "%b"), YM = format(date, "%y %b")) %>%
filter(Month %in% c("Mar", "Jun", "Sep", "Dec")) %>%
select(date, Year,  Month, YM ) %>% unique() %>%
group_by(YM) %>%
filter(date == last(date)) %>%
filter( date == last(date)) %>%
pull(date)
# now for gettiing the top 3 stock in each cluster that way we have a a single capping objective
rebalance_col <-
df %>%
filter(date %in% Rebalance_Days) %>%
# Now we have to distinguish rebalances - to create something to group by:
mutate(RebalanceTime = format(date, "%Y%B")) %>%
# Now we can group...
group_by(RebalanceTime, clusters) %>% summarise(date = date, stock,  weight = vol/sum(vol) ) %>% filter(!is.na(weight)) %>%
# Now trim down to 30 stocks and reweight so sum(w)=1
arrange(desc(weight)) %>%
top_n(5, weight) %>%
mutate(weight = weight/sum(weight)) %>%
ungroup() %>%
arrange(date)
# now lets cap each at 30%
rebalance_col
Capped <- rebalance_col %>%
# Split our df into groups (where the groups here are the rebalance dates:
group_split(RebalanceTime, clusters) %>%
# Apply the function Proportional_Cap_Foo to each rebalancing date:
map_df(~Proportional_Cap_Foo(., W_Cap = 0.20) ) %>% select(-RebalanceTime)
# define our rebalance months
# at the rebalancing date you want to take the top n of each clusters and reweight.
df <- cluster_portfolio[[1]]
df <- df %>% as.tibble()
Rebalance_Days <- df %>%
mutate(Year = format(date, "%Y"), Month = format(date, "%b"), YM = format(date, "%y %b")) %>%
filter(Month %in% c("Mar", "Jun", "Sep", "Dec")) %>%
select(date, Year,  Month, YM ) %>% unique() %>%
group_by(YM) %>%
filter(date == last(date)) %>%
filter( date == last(date)) %>%
pull(date)
# now for gettiing the top 3 stock in each cluster that way we have a a single capping objective
rebalance_col <-
df %>%
filter(date %in% Rebalance_Days) %>%
# Now we have to distinguish rebalances - to create something to group by:
mutate(RebalanceTime = format(date, "%Y%B")) %>%
# Now we can group...
group_by(RebalanceTime, clusters) %>% summarise(date = date, stock,  weight = vol/sum(vol) ) %>% filter(!is.na(weight)) %>%
# Now trim down to 30 stocks and reweight so sum(w)=1
arrange(desc(weight)) %>%
top_n(5, weight) %>%
mutate(weight = weight/sum(weight)) %>%
ungroup() %>%
arrange(date)
# now lets cap each at 30%
rebalance_col
Capped <- rebalance_col %>%
# Split our df into groups (where the groups here are the rebalance dates:
group_split(RebalanceTime, clusters) %>%
# Apply the function Proportional_Cap_Foo to each rebalancing date:
map_df(~Proportional_Cap_Foo(., W_Cap = 0.25) ) %>% select(-RebalanceTime)
# Check
#
# Capped %>% pull(weight) %>% max(.)
wts <- Capped
Returns <- df
perfromance_raw <- left_join(wts, Returns, c("stock", "date", "clusters"))
cluster_perfromance_data <- perfromance_raw %>%
group_by(clusters, date) %>%
mutate(cluster_return = weight * rtn) %>%
summarise(cluster_return = sum(cluster_return, na.rm = TRUE)) %>%
arrange(date)
# Create an empty list to store the final cluster performance data
cluster_performance_list <- list()
for (i in seq_along(cluster_portfolio)) {
df <- cluster_portfolio[[i]] %>% as.tibble()
# ... (rest of your code for Rebalance_Days and rebalance_col) ...
# Apply the Proportional_Cap_Foo function to each rebalancing date
Capped <- rebalance_col %>%
group_split(RebalanceTime, clusters) %>%
map_df(~Proportional_Cap_Foo(., W_Cap = 0.4)) %>%
select(-RebalanceTime)
# Merge weights with returns
wts <- Capped
Returns <- df
performance <- left_join(wts, Returns, c("stock", "date", "clusters"))
# Calculate cluster returns
cluster_performance_data <- performance %>%
group_by(clusters, date) %>%
mutate(cluster_return = weight * rtn) %>%
summarise(cluster_return = sum(cluster_return, na.rm = TRUE)) %>%
mutate(cluster_return = ifelse(cluster_return == 0, NA, cluster_return)) %>%
filter(!is.na(cluster_return)) %>%
group_by(clusters) %>%
summarize(
N = n(),
mu = ifelse(N <= 4, prod(1 + cluster_return), prod(1 + cluster_return) ^ (12 / N) - 1),
annualized_sd = sd(cluster_return) * sqrt(4),
sharpe_ratio = mu / annualized_sd
) %>%
select(clusters, sharpe_ratio, N)
# Store the result in the list
cluster_performance_list[[i]] <- cluster_performance_data
}
result <- foreach(df = cluster_performance_list, .combine = rbind) %dopar% {
df
}
result %>%
ggplot(aes(x = N, y = sharpe_ratio)) +
geom_point() +
facet_grid(~clusters) +
labs(title = "Risk Adjusted Performance as Investment Horizon Increases",
x = "Quarters",
y = "Sharpe Ratio") +
fmxdat::theme_fmx()
result %>%
ggplot(aes(x = N, y = sharpe_ratio)) +
geom_point() +
facet_grid(~clusters) +
labs(title = "Risk Adjusted Performance as Investment Horizon Increases",
subtitle = " 5 Constituents Per Cluster"
x = "Quarters",
result %>%
ggplot(aes(x = N, y = sharpe_ratio)) +
geom_point() +
facet_grid(~clusters) +
labs(title = "Risk Adjusted Performance as Investment Horizon Increases",
subtitle = " 5 Constituents Per Cluster",
x = "Quarters",
y = "Sharpe Ratio") +
fmxdat::theme_fmx()
# define our rebalance months
# at the rebalancing date you want to take the top n of each clusters and reweight.
df <- cluster_portfolio[[1]]
df <- df %>% as.tibble()
Rebalance_Days <- df %>%
mutate(Year = format(date, "%Y"), Month = format(date, "%b"), YM = format(date, "%y %b")) %>%
filter(Month %in% c("Mar", "Jun", "Sep", "Dec")) %>%
select(date, Year,  Month, YM ) %>% unique() %>%
group_by(YM) %>%
filter(date == last(date)) %>%
filter( date == last(date)) %>%
pull(date)
# now for gettiing the top 3 stock in each cluster that way we have a a single capping objective
rebalance_col <-
df %>%
filter(date %in% Rebalance_Days) %>%
# Now we have to distinguish rebalances - to create something to group by:
mutate(RebalanceTime = format(date, "%Y%B")) %>%
# Now we can group...
group_by(RebalanceTime, clusters) %>% summarise(date = date, stock,  weight = vol/sum(vol) ) %>% filter(!is.na(weight)) %>%
# Now trim down to 30 stocks and reweight so sum(w)=1
arrange(desc(weight)) %>%
top_n(4, weight) %>%
mutate(weight = weight/sum(weight)) %>%
ungroup() %>%
arrange(date)
# now lets cap each at 30%
rebalance_col
Capped <- rebalance_col %>%
# Split our df into groups (where the groups here are the rebalance dates:
group_split(RebalanceTime, clusters) %>%
# Apply the function Proportional_Cap_Foo to each rebalancing date:
map_df(~Proportional_Cap_Foo(., W_Cap = 0.3) ) %>% select(-RebalanceTime)
# Check
#
# Capped %>% pull(weight) %>% max(.)
wts <- Capped
Returns <- df
perfromance_raw <- left_join(wts, Returns, c("stock", "date", "clusters"))
cluster_perfromance_data <- perfromance_raw %>%
group_by(clusters, date) %>%
mutate(cluster_return = weight * rtn) %>%
summarise(cluster_return = sum(cluster_return, na.rm = TRUE)) %>%
arrange(date)
# Create an empty list to store the final cluster performance data
cluster_performance_list <- list()
for (i in seq_along(cluster_portfolio)) {
df <- cluster_portfolio[[i]] %>% as.tibble()
# ... (rest of your code for Rebalance_Days and rebalance_col) ...
# Apply the Proportional_Cap_Foo function to each rebalancing date
Capped <- rebalance_col %>%
group_split(RebalanceTime, clusters) %>%
map_df(~Proportional_Cap_Foo(., W_Cap = 0.4)) %>%
select(-RebalanceTime)
# Merge weights with returns
wts <- Capped
Returns <- df
performance <- left_join(wts, Returns, c("stock", "date", "clusters"))
# Calculate cluster returns
cluster_performance_data <- performance %>%
group_by(clusters, date) %>%
mutate(cluster_return = weight * rtn) %>%
summarise(cluster_return = sum(cluster_return, na.rm = TRUE)) %>%
mutate(cluster_return = ifelse(cluster_return == 0, NA, cluster_return)) %>%
filter(!is.na(cluster_return)) %>%
group_by(clusters) %>%
summarize(
N = n(),
mu = ifelse(N <= 4, prod(1 + cluster_return), prod(1 + cluster_return) ^ (12 / N) - 1),
annualized_sd = sd(cluster_return) * sqrt(4),
sharpe_ratio = mu / annualized_sd
) %>%
select(clusters, sharpe_ratio, N)
# Store the result in the list
cluster_performance_list[[i]] <- cluster_performance_data
}
result <- foreach(df = cluster_performance_list, .combine = rbind) %dopar% {
df
}
result %>%
ggplot(aes(x = N, y = sharpe_ratio)) +
geom_point() +
facet_grid(~clusters) +
labs(title = "Risk Adjusted Performance as Investment Horizon Increases",
subtitle = " 4 Constituents Per Cluster",
x = "Quarters",
y = "Sharpe Ratio") +
fmxdat::theme_fmx()
# define our rebalance months
# at the rebalancing date you want to take the top n of each clusters and reweight.
df <- cluster_portfolio[[1]]
df <- df %>% as.tibble()
Rebalance_Days <- df %>%
mutate(Year = format(date, "%Y"), Month = format(date, "%b"), YM = format(date, "%y %b")) %>%
filter(Month %in% c("Mar", "Jun", "Sep", "Dec")) %>%
select(date, Year,  Month, YM ) %>% unique() %>%
group_by(YM) %>%
filter(date == last(date)) %>%
filter( date == last(date)) %>%
pull(date)
# now for gettiing the top 3 stock in each cluster that way we have a a single capping objective
rebalance_col <-
df %>%
filter(date %in% Rebalance_Days) %>%
# Now we have to distinguish rebalances - to create something to group by:
mutate(RebalanceTime = format(date, "%Y%B")) %>%
# Now we can group...
group_by(RebalanceTime, clusters) %>% summarise(date = date, stock,  weight = vol/sum(vol) ) %>% filter(!is.na(weight)) %>%
# Now trim down to 30 stocks and reweight so sum(w)=1
arrange(desc(weight)) %>%
top_n(3, weight) %>%
mutate(weight = weight/sum(weight)) %>%
ungroup() %>%
arrange(date)
# now lets cap each at 30%
rebalance_col
Capped <- rebalance_col %>%
# Split our df into groups (where the groups here are the rebalance dates:
group_split(RebalanceTime, clusters) %>%
# Apply the function Proportional_Cap_Foo to each rebalancing date:
map_df(~Proportional_Cap_Foo(., W_Cap = 0.3) ) %>% select(-RebalanceTime)
# define our rebalance months
# at the rebalancing date you want to take the top n of each clusters and reweight.
df <- cluster_portfolio[[1]]
df <- df %>% as.tibble()
Rebalance_Days <- df %>%
mutate(Year = format(date, "%Y"), Month = format(date, "%b"), YM = format(date, "%y %b")) %>%
filter(Month %in% c("Mar", "Jun", "Sep", "Dec")) %>%
select(date, Year,  Month, YM ) %>% unique() %>%
group_by(YM) %>%
filter(date == last(date)) %>%
filter( date == last(date)) %>%
pull(date)
# now for gettiing the top 3 stock in each cluster that way we have a a single capping objective
rebalance_col <-
df %>%
filter(date %in% Rebalance_Days) %>%
# Now we have to distinguish rebalances - to create something to group by:
mutate(RebalanceTime = format(date, "%Y%B")) %>%
# Now we can group...
group_by(RebalanceTime, clusters) %>% summarise(date = date, stock,  weight = vol/sum(vol) ) %>% filter(!is.na(weight)) %>%
# Now trim down to 30 stocks and reweight so sum(w)=1
arrange(desc(weight)) %>%
top_n(3, weight) %>%
mutate(weight = weight/sum(weight)) %>%
ungroup() %>%
arrange(date)
# now lets cap each at 30%
rebalance_col
Capped <- rebalance_col %>%
# Split our df into groups (where the groups here are the rebalance dates:
group_split(RebalanceTime, clusters) %>%
# Apply the function Proportional_Cap_Foo to each rebalancing date:
map_df(~Proportional_Cap_Foo(., W_Cap = 0.35) ) %>% select(-RebalanceTime)
# Check
#
# Capped %>% pull(weight) %>% max(.)
wts <- Capped
Returns <- df
perfromance_raw <- left_join(wts, Returns, c("stock", "date", "clusters"))
cluster_perfromance_data <- perfromance_raw %>%
group_by(clusters, date) %>%
mutate(cluster_return = weight * rtn) %>%
summarise(cluster_return = sum(cluster_return, na.rm = TRUE)) %>%
arrange(date)
# Create an empty list to store the final cluster performance data
cluster_performance_list <- list()
for (i in seq_along(cluster_portfolio)) {
df <- cluster_portfolio[[i]] %>% as.tibble()
# ... (rest of your code for Rebalance_Days and rebalance_col) ...
# Apply the Proportional_Cap_Foo function to each rebalancing date
Capped <- rebalance_col %>%
group_split(RebalanceTime, clusters) %>%
map_df(~Proportional_Cap_Foo(., W_Cap = 0.4)) %>%
select(-RebalanceTime)
# Merge weights with returns
wts <- Capped
Returns <- df
performance <- left_join(wts, Returns, c("stock", "date", "clusters"))
# Calculate cluster returns
cluster_performance_data <- performance %>%
group_by(clusters, date) %>%
mutate(cluster_return = weight * rtn) %>%
summarise(cluster_return = sum(cluster_return, na.rm = TRUE)) %>%
mutate(cluster_return = ifelse(cluster_return == 0, NA, cluster_return)) %>%
filter(!is.na(cluster_return)) %>%
group_by(clusters) %>%
summarize(
N = n(),
mu = ifelse(N <= 4, prod(1 + cluster_return), prod(1 + cluster_return) ^ (12 / N) - 1),
annualized_sd = sd(cluster_return) * sqrt(4),
sharpe_ratio = mu / annualized_sd
) %>%
select(clusters, sharpe_ratio, N)
# Store the result in the list
cluster_performance_list[[i]] <- cluster_performance_data
}
result <- foreach(df = cluster_performance_list, .combine = rbind) %dopar% {
df
}
result %>%
ggplot(aes(x = N, y = sharpe_ratio)) +
geom_point() +
facet_grid(~clusters) +
labs(title = "Risk Adjusted Performance as Investment Horizon Increases",
subtitle = " 3 Constituents Per Cluster",
x = "Quarters",
y = "Sharpe Ratio") +
fmxdat::theme_fmx()
rebalance_weights
monthly_attribution
monthly_data <-
cluster.merging %>% group_by(stock) %>%  mutate(rtn = px/ lag(px)-1) %>% slice(-1)
df <- monthly_data
Rebalance_Days <- df %>%
mutate(Year = format(date, "%Y"), Month = format(date, "%b"), YM = format(date, "%y %b")) %>%
filter(Month %in% c("Mar", "Jun", "Sep", "Dec")) %>%
select(date, Year,  Month, YM ) %>% unique() %>%
group_by(YM) %>%
filter(date == last(date)) %>%
filter( date == last(date)) %>%
pull(date)
Rebalance_Days
Rebalance_Days <- df %>%
mutate(Year = format(date, "%Y"), Month = format(date, "%b"), YM = format(date, "%y %b")) %>%
filter(Month %in% c("Mar", "Jun", "Sep", "Dec")) %>%
select(date, Year,  Month, YM ) %>% unique() %>%
group_by(YM) %>%
filter(date == last(date)) %>%
filter( date == last(date)) %>% distint()
Rebalance_Days <- df %>%
mutate(Year = format(date, "%Y"), Month = format(date, "%b"), YM = format(date, "%y %b")) %>%
filter(Month %in% c("Mar", "Jun", "Sep", "Dec")) %>%
select(date, Year,  Month, YM ) %>% unique() %>%
group_by(YM) %>%
filter(date == last(date)) %>%
filter( date == last(date)) %>% distint(date)
Rebalance_Days <- df %>%
mutate(Year = format(date, "%Y"), Month = format(date, "%b"), YM = format(date, "%y %b")) %>%
filter(Month %in% c("Mar", "Jun", "Sep", "Dec")) %>%
select(date, Year,  Month, YM ) %>% unique() %>%
group_by(YM) %>%
filter(date == last(date)) %>%
filter( date == last(date)) %>% distinct(date)
pull(date)
Rebalance_Days <- df %>%
mutate(Year = format(date, "%Y"), Month = format(date, "%b"), YM = format(date, "%y %b")) %>%
filter(Month %in% c("Mar", "Jun", "Sep", "Dec")) %>%
select(date, Year,  Month, YM ) %>% unique() %>%
group_by(YM) %>%
filter(date == last(date)) %>%
filter( date == last(date)) %>% distinct(date) %>%
pull(date)
Rebalance_Days
rebalance_col <-
df %>%
filter(date %in% Rebalance_Days) %>%
# Now we have to distinguish rebalances - to create something to group by:
mutate(RebalanceTime = format(date, "%Y%B")) %>%
# Now we can group...
group_by(RebalanceTime, clusters) %>% summarise(date = date, stock,  weight = vol/sum(vol) ) %>% filter(!is.na(weight)) %>%
# Now trim down to 30 stocks and reweight so sum(w)=1
arrange(desc(weight)) %>%
top_n(3, weight) %>%
mutate(weight = weight/sum(weight)) %>%
ungroup() %>%
arrange(date)
cluster.merging
rebalance_col <-
df %>%
filter(date %in% Rebalance_Days) %>%
# Now we have to distinguish rebalances - to create something to group by:
mutate(RebalanceTime = format(date, "%Y%B")) %>%
# Now we can group...
group_by(RebalanceTime, cluster) %>% summarise(date = date, stock,  weight = vol/sum(vol) ) %>% filter(!is.na(weight)) %>%
# Now trim down to 30 stocks and reweight so sum(w)=1
arrange(desc(weight)) %>%
top_n(3, weight) %>%
mutate(weight = weight/sum(weight)) %>%
ungroup() %>%
arrange(date)
Capped <- rebalance_col %>%
# Split our df into groups (where the groups here are the rebalance dates:
group_split(RebalanceTime, cluster) %>%
# Apply the function Proportional_Cap_Foo to each rebalancing date:
map_df(~Proportional_Cap_Foo(., W_Cap = 0.35) ) %>% select(-RebalanceTime)
for (cluster_num in unique(Cap$cluster)) {
# Subset Cap and monthly_attribution for the current cluster
Cap_cluster <- filter(Cap, cluster == cluster_num)
monthly_cluster <- filter(monthly_attribution, cluster == cluster_num)
# Apply Cluster_Portfolio function
result <- Cluster_Portfolio(Cap_cluster, monthly_cluster, cluster_num)
# Add the result to the list
Cluster_Port[[as.character(cluster_num)]] <- result
}
Cluster_Port <- list()
# Loop over dataframes with clusters, had to be a double loop
for (cluster_num in unique(Cap$cluster)) {
# Subset Cap and monthly_attribution for the current cluster
Cap_cluster <- filter(Cap, cluster == cluster_num)
monthly_cluster <- filter(monthly_attribution, cluster == cluster_num)
# Apply Cluster_Portfolio function
result <- Cluster_Portfolio(Cap_cluster, monthly_cluster, cluster_num)
# Add the result to the list
Cluster_Port[[as.character(cluster_num)]] <- result
}
Portfolio <- Reduce(inner_join, Cluster_Port) %>%
gather(Cluster, return, -date)
# plot
Portfolio %>%
group_by(Cluster) %>%
mutate(Idx = cumprod(1 + return), Idx = Idx/first(Idx)) %>%
ggplot(aes(date, Idx, color = Cluster)) +
geom_line() +
labs(title = "Capped Cluster Return On Investment",
subtitle = "",
x = "",
y = "Cumulative Return") +
fmxdat::theme_fmx()
View(Cluster_Portfolio)
